// Generated by CoffeeScript 1.4.0
var Admin, Conference, Config, Organisation, Schema, Slide, confDB, dsn, getOrgaList, getOrgaListfromAdmin, mongoose, orderArray, readAllConferences, readConference, readSlideList, readSlideListForSlider, readSlideToSend, setSent,
  _this = this;

mongoose = require('mongoose');

Schema = mongoose.Schema;

Admin = require('./Models/Admin.js');

Slide = require('./Models/Slide.js');

Organisation = require("./Models/Organisation.js");

Conference = require("./Models/Conference.js");

Config = require("./config");

dsn = Config.dsn;

mongoose.connect(dsn);

confDB = mongoose.connection;

confDB.on('error', console.error.bind(console, 'connection error com:'));

module.exports.getOrgaListfromAdmin = getOrgaListfromAdmin = function(AdminEmail, callback) {
  var organisation;
  organisation = null;
  return Admin.findOne({
    email: AdminEmail
  }, function(err, admin) {
    console.log(admin);
    if (err) {
      console.log(err);
    }
  }).populate('organisations').exec(function(err, admin) {
    var organisations;
    organisations = admin.organisations;
    return callback(organisations);
  });
};

module.exports.getOrgaList = getOrgaList = function(callback) {
  var organisation;
  organisation = null;
  return Organisation.find(function(err, organisations) {
    if (err) {
      console.log("find erreur man");
    }
    if (organisations.length > 0) {
      organisation = organisations;
      return callback(organisation);
    }
  });
};

module.exports.readConference = readConference = function(OrgId, page, callback) {
  var Confs, finish, start,
    _this = this;
  Confs = [];
  finish = page * 5;
  start = finish - 5;
  finish--;
  return Organisation.findOne({
    _id: OrgId
  }, function(err, organisation) {
    if (err) {
      return console.log("error while trying to find the organisations of this admin");
    }
  }).populate('conferences').exec(function(err, organisation) {
    var len;
    if (organisation.conferences.length > 0) {
      len = organisation.conferences.length - 1;
      return orderArray(organisation.conferences, len, function(orderedConfs) {
        var i, _i;
        for (i = _i = start; start <= finish ? _i <= finish : _i >= finish; i = start <= finish ? ++_i : --_i) {
          console.log("i", i);
          if (orderedConfs[i]) {
            Confs.push(orderedConfs[i]);
          }
        }
        return callback(Confs);
      });
    } else {
      return callback(Confs);
    }
  });
};

module.exports.readAllConferences = readAllConferences = function(page, callback) {
  var Confs, finish, start,
    _this = this;
  Confs = [];
  finish = page * 5;
  start = finish - 5;
  finish--;
  return Conference.find(function(err, confs) {
    var len;
    if (err) {
      console.log("erreur: ", err);
    }
    if (confs.length > 0) {
      len = confs.length - 1;
      return orderArray(confs, len, function(ordered) {
        var i, _i;
        for (i = _i = start; start <= finish ? _i <= finish : _i >= finish; i = start <= finish ? ++_i : --_i) {
          console.log(i);
          if (orderedConfs[i]) {
            Confs.push(orderedConfs[i]);
          }
        }
        return callback(Confs);
      });
    } else {
      return callback(Confs);
    }
  });
};

orderArray = function(array, len, callback) {
  var elt, i, j, _i;
  for (i = _i = 1; 1 <= len ? _i <= len : _i >= len; i = 1 <= len ? ++_i : --_i) {
    elt = array[i];
    j = i;
    while (j > 0 && array[j - 1].date.getTime() > elt.date.getTime()) {
      array[j] = array[j - 1];
      j--;
    }
    array[j] = elt;
  }
  return callback(array);
};

module.exports.readSlideList = readSlideList = function(ConfId, callback) {
  var slides,
    _this = this;
  slides = [];
  return Conference.findOne({
    _id: ConfId
  }, function(err, conference) {
    if (err) {
      return console.log("error while trying to find the organisations of this admin");
    }
  }).populate('slides').exec(function(err, conferences) {
    var slide, _i, _len, _ref;
    _ref = conferences.slides;
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      slide = _ref[_i];
      if (slide.Sent) {
        slides.push(slide);
      }
    }
    return callback(slides);
  });
};

module.exports.readSlideListForSlider = readSlideListForSlider = function(ConfId, callback) {
  var slides,
    _this = this;
  slides = null;
  return Conference.findOne({
    _id: ConfId
  }, function(err, conference) {
    if (err) {
      return console.log("error while trying to find the organisations of this admin");
    }
  }).populate('slides').exec(function(err, conference) {
    return callback(conference.slides);
  });
};

module.exports.readSlideToSend = readSlideToSend = function(slideId, callback) {
  var _this = this;
  return Slide.findOne({
    _id: slideId
  }, function(err, slide) {
    if (err) {
      console.log("voici l'erreur", err);
    }
    return callback(slide);
  });
};

module.exports.setSent = setSent = function(sent, id) {
  return Slide.update({
    _id: id
  }, {
    Sent: sent
  }, {
    multi: true
  }, function(err, numberAffected, raw) {});
};
